#!/bin/bash

function generatekeys {
  for host in $hosts; do
    shost=`echo $host cut -d . -f 1`
    keytool -genkey -noprompt -alias gateway-identity -keyalg RSA -dname "CN=$host, OU=$OU, O=$O, L=$L, S=$S, C=$C" -keystore $shost.jks -storepass "$KEYPASS"  -keypass "$KEYPASS"
  done
}

function generatecsr {
  for host in $hosts; do
    shost=`echo $host cut -d . -f 1`
    keytool -certreq -noprompt -alias gateway-identity -keyalg RSA -keystore $shost.jks -storepass "$KEYPASS"  -keypass "$KEYPASS"
  done
}

function importcert {
  for host in $hosts; do
    shost=`echo $host cut -d . -f 1`
    keytool --importcert -noprompt -alias gateway-identity -file $shost.cer -keystore $shost.jks -storepass "$KEYPASS"  -keypass "$KEYPASS"
  done
  for cert in `ls ca/`; do
    keytool -import -file ca/$cert -alias $cert  -keystore $shost.jks -storepass "$KEYPASS"
  done
}

function generateca {
  openssl req -new -newkey rsa:2048 -days 365 -nodes -x509 \
      -subj "/C=$C/ST=$S/L=$L/O=$O/CN=$domain" \
      -keyout $domain.key  -out $domain.cer
  mkdir -p ca/
  cp $domain.cer ca/
}

function generatetruststore {
  for cert in `ls ca/`; do
    keytool -import -file ca/$cert -alias $cert -keystore truststore.jks -storepass "$TRUSTPASS"
  done
}

function generatepems {
  for host in $hosts; do
    shost=`echo $host cut -d . -f 1`
    keytool -importkeystore -srckeystore $shost.jks \
      -srcstorepass "$KEYPASS" -srckeypass "$KEYPASS" -destkeystore $shost.p12 \
      -deststoretype PKCS12 -srcalias gateway-identity -deststorepass "$KEYPASS" -destkeypass "$KEYPASS"
    openssl pkcs12 -in $shost.p12 -passin pass:"$KEYPASS"  -nokeys $shost.pem
    openssl rsa -in $shost.p12 -passin pass:"$KEYPASS" -nocerts -out $host.pem
    rm -f $shost.p12
  done
}

function pushkeys {
  for host in $hosts; do
    shost=`echo $host cut -d . -f 1`
    ssh $host mkdir -p $KEYLOC\; chmod ugo+rx $KEYLOC
    ssh $host mkdir -p $TRUSTLOC\; chmod ugo+rx $TRUSTLOC
    rsync -arP $shost.jks $host:${KEYLOC}/server.jks
    rsync -arP truststore.jks $host:${TRUSTLOC}/truststore.jks
    rsync -arP $shost.pem $host:${KEYLOC}/server.pem
    rsync -arP $shost.key $host:${KEYLOC}/server.key
  done
}


configs=$1

if [ -z $configs ] && ! [ -s $keys ]; then
  echo Configs file does not exist, specify as first argument
  exit 1
fi

$hostsfile=`cat $config | grep HostFile | cut -d "=" -f 2 `
if [ -z $hostfile ] && ! [ -s $hostfile ]; then
  echo Host file is not specified or empty
  exit 1
fi


$OU=`cat $config | grep OrganizationUnit | cut -d "=" -f 2`
if [ -z $OU ]; then
  echo OrganizationUnit is not specified
  exit 1
fi

$O=`cat $config | grep Organization | cut -d "=" -f 2 `
if [ -z $Organization ]; then
  echo Organization is not specified
  exit 1
fi

$L=`cat $config | grep City | cut -d "=" -f 2 `
if [ -z $L ]; then
  echo City is not specified
  exit 1
fi

$S=`cat $config | grep State | cut -d "=" -f 2`
if [ -z $S ]; then
  echo State is not specified
  exit 1
fi

$C=`cat $config | grep CountryCode | cut -d "=" -f 2`
if [ -z $C ]; then
  echo CountryCode is not specified
  exit 1
fi

$KEYPASS=`cat $config | grep KeyStorePassword | cut -d "=" -f 2`
if [ -z $KEYPASS ]; then
  echo KeyStorePassword is not specified
  exit 1
fi

$TRUSTPASS=`cat $config | grep TrustStorePassword | cut -d "=" -f 2`
if [ -z $TRUSTPASS ]; then
  echo TrustStorePassword is not specified
  exit 1
fi

$KEYLOC=`cat $config | grep KeyStoreLocation | cut -d "=" -f 2`
if [ -z $KEYLOC ]; then
  echo KeyStoreLocation is not specified
  exit 1
fi

$TRUSTLOC=`cat $config | grep TrustStoreLocation | cut -d "=" -f 2`
if [ -z $TRUSTLOC ]; then
  echo TrustStoreLocation is not specified
  exit 1
fi

$domain=`tail -n 1 $hostsfile | cut -d . -f 2-`
$hosts=`cat $hostsfile | cut -d . -f 1`

mkdir -p ca

esac
case $2 in
  LocalAuthority)
    generateca
    generatekeys
    generatecsr
    importcert
    generatetruststore
    pushkeys
    ;;
  RemoteAuthorityGenerateCSR)
    generatekeys
    generatecsr
    ;;
  RemoteAuthorityImportCertsAndPush)
    importcert
    generatetruststore
    pushkeys
    ;;
  *)
    echo -e "Usage: $0 {LocalAuthority|LocalAuthority|RemoteAuthorityImportCertsAndPush}\n LocalAuthority: Generate local CA, generate truststore and keystores, and push to servers.\n RemoteAuthorityGenerateCSR: Generate keystore and CSR's to be signed be a remote authority.\n RemoteAuthorityImportCertsAndPush: Import certs generated by remote authority. Naming should shorthostame.cer. RemoteAuthorityGenerateCSR must be run first and CSR's from that signed"
esac
